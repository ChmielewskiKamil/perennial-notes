@startuml PerennialArchitecture

left to right direction

skinparam linetype ortho 
' skinparam nodesep 60
' skinparam ranksep 30

skinparam note {
    BorderColor black
    BackgroundColor white
    FontColor black
}
skinparam component {
    FontSize 25
    BackgroundColor lightgray
}

skinparam collections {
    FontSize 20
}

skinparam package {
    BorderColor black
    BackgroundColor lightblue
}

/' Actors '/
actor Liquidators
actor Makers
actor Takers
actor "Market Operator" as MarketOperator
actor Admin #green
actor Pauser

/' //////////////////////////////////////////////////////////////////
//                           Core Contracts                        //
////////////////////////////////////////////////////////////////// '/

component Market

component Collateral

component MultiInvoker 

component ChainlinkOracle 

component Incentivizer 

component Controller

component ProductProvider 

component PerennialLens

/' //////////////////////////////////////////////////////////////////
//                       Contract Functions                        //
////////////////////////////////////////////////////////////////// '/

/'Collateral'/
rectangle deposit <<depositTo>>
rectangle withdrawFrom <<withdrawFrom>>
rectangle withdrawTo <<withdrawTo>>
rectangle liquidate <<liquidate>>
rectangle "Settle Account" as collateral_settleAccount <<settleAccount>>
rectangle "Settle Product" as collateral_settleProduct <<settleProduct>>
rectangle "Resolve Shortfall" as resolveShortfall <<resolveShortfall>>
rectangle "Claim Fees" as claimFee <<claimFee>>

/'Market'/
rectangle "Open Take Position" as openTake <<openTake>>
rectangle "Close Take Position" as closeTake <<closeTake>>
rectangle "Open Make Position" as openMake <<openMake>>
rectangle "Close Make Position" as closeMake <<closeMake>>
rectangle "Settle" as market_settle <<settle>>
rectangle "Settle Account" as market_settleAccount <<settleAccount>>
rectangle "Close All Positions" as closeAll <<closeAll>>
rectangle "Close / Open Market" as updateClosed <<updateClosed>>
rectangle "Update Market Oracle" as updateOracle <<updateOracle>>

/'Controller'/
rectangle "Add new Product Provider" as createCoordinator <<createCoordinator>>
rectangle "Update the owner of the Product Provider" as updateCoordinator <<updateCoordinatorPendingOwner>>
rectangle "Update the treasury address of the Product Provider" as updateTreasury <<updateCoordinatorTreasury>>
rectangle "Updating Core Protocol Parameters" as UPDATE_PROTOCOL_PARAMS {
    rectangle "Update Collateral contract address" as updateCollateral <<updateCollateral>>
    rectangle "Update Incentivizer contract address" as updateIncentivizer <<updateIncentivizer>>
    rectangle "Update Product Implementation Beacon" as updateProductBeacon <<updateProductBeacon>>
    rectangle "Update Multi Invoker address" as updateMultiInvoker <<updateMultiInvoker>>
    rectangle "Update Protocol - Product fee split" as updateProtocolFee <<updateProtocolFee>>
    rectangle "Update minimum Funding rate" as updateMinFundingRate <<updateMinFundingRate>>
    rectangle "Update liquidation fee" as updateLiquidationFee <<updateLiquidationFee>>
    rectangle "Update incentivization fee" as updateIncentivizationFee <<updateIncentivizationFee>>
    rectangle "Update minimum user collateral" as updateMinCollateral <<updateMinCollateral>>
    rectangle "Update max incentivization programs per product" as updateProgramsPerProduct <<updateProgramsPerProduct>>
    rectangle "Update Pauser address" as updatePauser <<updatePauser>>
}
rectangle "Pause / Unpause the protocol" as pause <<updatePaused>>

/'MultiInvoker'/
rectangle "Call multiple protocol functions" as invoke <<invoke>>

/'PerennialLens'/

/' //////////////////////////////////////////////////////////////////
//                           Connections                           //
////////////////////////////////////////////////////////////////// '/

'Collateral contract functions'
deposit --> Collateral
withdrawTo --> Collateral
withdrawFrom --> Collateral
withdrawTo --> withdrawFrom
liquidate --> Collateral
collateral_settleAccount --> Collateral
collateral_settleProduct --> Collateral
claimFee --> Collateral
resolveShortfall --> Collateral
'Calls to Collateral contract functions'
Makers --> deposit
Makers --> withdrawTo
Makers --> withdrawFrom
Liquidators --> liquidate
Market --> collateral_settleAccount 
Market --> collateral_settleProduct 
MarketOperator --> resolveShortfall

'Market functions'
openMake --> Market
closeMake --> Market
openTake --> Market
closeTake --> Market
market_settle --> Market
market_settleAccount --> Market
closeAll --> Market
updateClosed --> Market
updateOracle --> Market
'Calls to Market contract functions'
Makers --> openMake 
Makers --> closeMake 
Takers --> openTake
Takers --> closeTake
Collateral --> closeAll
MarketOperator --> updateClosed
MarketOperator --> updateOracle
PerennialLens --> market_settle
PerennialLens --> market_settleAccount

'Controller functions'
createCoordinator --> Controller
updateCoordinator --> Controller
updateTreasury --> Controller
UPDATE_PROTOCOL_PARAMS --> Controller
pause --> Controller

'Calls to Controller functions'
ProductProvider --> createCoordinator: ?
ProductProvider --> updateCoordinator
ProductProvider --> updateTreasury
Admin --> UPDATE_PROTOCOL_PARAMS
Pauser --> pause

'MultiInvoker functions'
invoke --> MultiInvoker

/' //////////////////////////////////////////////////////////////////
//                             Notes                               //
////////////////////////////////////////////////////////////////// '/

note bottom of collateral_settleAccount: Moves collateral within the product 
note top of collateral_settleProduct 
    Removes collateral
    from the product as fees
end note
note right of MultiInvoker: Allows batch calls
note right of Market: In V1 known as Product
note left of Makers: Liquidity Providers
note left of Takers: Traders
note bottom of resolveShortfall: Market Operator or Insurer can re-capitalize insolvent market
note bottom of createCoordinator: This can be called by anyone
note bottom of market_settle: Global settlement flywheel
note right of Controller
    This contract is used to create new markets
    and control global protocol parameters.
end note

footer Perennial Protocol Architecture | author: @kamilchmielu
@enduml
